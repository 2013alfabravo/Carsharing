type: edu
files:
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the 'COMPANY' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    } else {
                        throw new WrongAnswer("Your 'COMPANY' table doesn't contain column named '" + columnName + "'.");
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in 'COMPANY' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import carsharing.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @DynamicTestingMethod
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram(Main.class);
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.");
            }

            return correct();
        }

        @DynamicTestingMethod
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTestingMethod
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTestingMethod
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();
            return correct();
        }

        @DynamicTestingMethod
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start("-databaseFileName", "carsharing");

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTestingMethod
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/view/ManagerActionsView.java
  visible: true
  text: |
    package carsharing.view;

    import carsharing.Main;

    public class ManagerActionsView implements View {
        private static final Menu menu = new Menu().addItem("Company list", "1")
                .addItem("Create a company", "2")
                .addItem("Back", "0");

        @Override
        public String getInput() {
            while (true) {
                String input = Main.scanner.nextLine().strip();
                if (menu.isValidKey(input)) {
                    return input;
                } else {
                    displayErrorMessage();
                }
            }
        }

        @Override
        public void display() {
            menu.show();
        }

        private void displayErrorMessage() {
            System.out.println("Please enter a valid number.");
        }
    }
  learner_created: true
- name: src/carsharing/controller/Controller.java
  visible: true
  text: |
    package carsharing.controller;

    import carsharing.model.Company;
    import carsharing.model.DataAccessObject;
    import carsharing.view.*;

    import java.util.List;

    public class Controller {
        private View view;
        private final View mainMenu = new MainMenuView();
        private final View managerActions = new ManagerActionsView();
        private final DataAccessObject dao;

        public Controller(DataAccessObject dao) {
            this.dao = dao;
        }

        public void run() {
            dao.createTable();
            displayMainMenu();
        }

        private void displayMainMenu() {
            while (true) {
                view = mainMenu;
                view.display();
                String input = view.getInput();
                if ("1".equals(input)) {
                    displayManagerActions();
                } else if ("0".equals(input)) {
                    break;
                }
            }
        }

        private void displayManagerActions() {
            while (true) {
                view = managerActions;
                view.display();
                String input = view.getInput();
                if ("1".equals(input)) {
                    displayCompanies();

                } else if ("2".equals(input)) {
                    addCompany();
                } else if ("0".equals(input)) {
                    break;
                }
            }
        }

        private void addCompany() {
            view = new NewCompanyView();
            view.display();
            String name = view.getInput();
            dao.addCompany(name);
        }

        private void displayCompanies() {
            List<Company> companies = dao.getAllCompanies();
            view = new CompanyListView(companies);
            view.display();
        }
    }
  learner_created: true
- name: src/carsharing/model/Company.java
  visible: true
  text: |
    package carsharing.model;

    public class Company {
        private int id;
        private String name;

        public Company(int id, String name) {
            this.id = id;
            this.name = name;
        }

        @Override
        public String toString() {
            return id + ". " + name;
        }
    }
  learner_created: true
- name: src/carsharing/view/MainMenuView.java
  visible: true
  text: |
    package carsharing.view;

    import carsharing.Main;

    public class MainMenuView implements View {
        private static final Menu menu = new Menu()
                .addItem("Log in as a manager", "1")
                .addItem("Exit", "0");

        @Override
        public String getInput() {
            while (true) {
                String actionKey = Main.scanner.nextLine().strip();
                if (menu.isValidKey(actionKey)) {
                    return actionKey;
                } else {
                    System.out.println("Please enter a valid number.");
                }
            }
        }

        @Override
        public void display() {
            menu.show();
        }
    }
  learner_created: true
- name: src/carsharing/view/View.java
  visible: true
  text: |
    package carsharing.view;

    public interface View {
        String getInput();
        void display();
    }
  learner_created: true
- name: src/carsharing/view/CompanyListView.java
  visible: true
  text: |
    package carsharing.view;

    import carsharing.model.Company;

    import java.util.List;

    public class CompanyListView implements View {
        private final List<Company> list;

        public CompanyListView(List<Company> list) {
            this.list = list;
        }

        @Override
        public String getInput() {
            return null;
        }

        @Override
        public void display() {
            if (list.isEmpty()) {
                displayErrorMessage();
            } else {
                System.out.println("\nCompany list:");
                list.forEach(System.out::println);
            }
        }

        private void displayErrorMessage() {
            System.out.println("The company list is empty!");
        }
    }
  learner_created: true
- name: src/carsharing/view/NewCompanyView.java
  visible: true
  text: |
    package carsharing.view;

    import carsharing.Main;

    public class NewCompanyView implements View {
        private String input;

        @Override
        public String getInput() {
            return input;
        }

        @Override
        public void display() {
            System.out.println("\nEnter the company name:");
            input = Main.scanner.nextLine().strip();
            System.out.println("The company was created!");
        }
    }
  learner_created: true
- name: src/carsharing/view/Menu.java
  visible: true
  text: |
    package carsharing.view;

    import java.util.*;

    public class Menu {
        private final List<String> items = new ArrayList<>();
        private final List<String> aKeys = new ArrayList<>();

        public void show() {
            System.out.println();
            items.forEach(System.out::println);
        }

        public Menu addItem(String title, String aKey) {
            items.add(aKey + ". " + title);
            aKeys.add(aKey);
            return this;
        }

        public boolean isValidKey(String aKey) {
            return aKeys.contains(aKey);
        }
    }
  learner_created: true
- name: src/carsharing/model/CompanyDAO.java
  visible: true
  text: |
    package carsharing.model;

    import java.sql.*;
    import java.util.ArrayList;
    import java.util.List;

    public class DataAccessObject {
        private static final String DEFAULT_DB_NAME = "default_car_sharing_db";
        private static final String PATH = "jdbc:h2:./src/carsharing/db/";
        private static final String DRIVER = "org.h2.Driver";
        private static final String SQL_CREATE_TABLE = "CREATE TABLE IF NOT EXISTS company (" +
                "id INTEGER AUTO_INCREMENT PRIMARY KEY, " +
                "name VARCHAR(255) UNIQUE NOT NULL" +
                ")";

        private final String dbFilename;

        public DataAccessObject(String dbFilename) throws ClassNotFoundException {
            this.dbFilename = PATH + dbFilename;
            Class.forName(DRIVER);
        }

        public DataAccessObject() throws ClassNotFoundException {
           this(DEFAULT_DB_NAME);
        }

        public void createTable() {
            try (Connection conn = DriverManager.getConnection(dbFilename);
                 Statement stmt = conn.createStatement()) {

                conn.setAutoCommit(true);
                stmt.executeUpdate(SQL_CREATE_TABLE);

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        public void addCompany(String name) {
            String sql = "INSERT INTO company(id, name) VALUES(NULL, '" + name + "')";
            try (Connection conn = DriverManager.getConnection(dbFilename);
                 Statement stmt = conn.createStatement()) {

                conn.setAutoCommit(true);
                stmt.executeUpdate(sql);

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        public List<Company> getAllCompanies() {
            String sql = "SELECT * FROM company ORDER BY id";
            List<Company> list = new ArrayList<>();
            try (Connection conn = DriverManager.getConnection(dbFilename);
                 Statement stmt = conn.createStatement()) {

                conn.setAutoCommit(true);
                ResultSet resultSet = stmt.executeQuery(sql);

                while (resultSet.next()) {
                    int id = resultSet.getInt("id");
                    String name = resultSet.getString("name");
                    list.add(new Company(id, name));
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            return list;
        }
    }
  learner_created: true
- name: src/carsharing/model/Car.java
  visible: true
  learner_created: true
- name: src/carsharing/model/CarDAO.java
  visible: true
  learner_created: true
- name: src/carsharing/view/CarListView.java
  visible: true
  learner_created: true
- name: src/carsharing/view/NewCarView.java
  visible: true
  learner_created: true
- name: src/carsharing/view/CompanyView.java
  visible: true
  learner_created: true
- name: src/carsharing/db/carsharing.mv.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/140/stages/760/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #6

    There is no back option in the company list.
    Your output should contain &#39;0. Back&#39;

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    Arguments: -databaseFileName carsharing


    1. Log in as a manager
    0. Exit
    &gt; 1

    1. Company list
    2. Create a company
    0. Back
    &gt; 1

    The company list is empty!

    1. Company list
    2. Create a company
    0. Back
    &gt; 2

    Enter the company name:
    &gt; Super company
    The company was created!

    1. Company list
    2. Create a company
    0. Back
    &gt; 1

    Choose a company:
    1. Super company
    &gt; 0

    1. Company list
    2. Create a company
    0. Back
    &gt; 2

    Enter the company name:
    &gt; Another company
    The company was created!

    1. Company list
    2. Create a company
    0. Back
    &gt; 2

    Enter the company name:
    &gt; One more company
    The company was created!

    1. Company list
    2. Create a company
    0. Back
    &gt; 1

    Choose a company:
    1. Super company
    2. Another company
    3. One more company
  time: Tue, 26 Jan 2021 07:55:59 UTC
record: -1
